
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace Game.Data
{
	public partial class UiCfg
	{
		private readonly System.Collections.Generic.Dictionary<int, UiCfgItem> _dataMap;
		private readonly System.Collections.Generic.List<UiCfgItem> _dataList;
		
		public UiCfg(ByteBuf _buf)
		{
			_dataMap = new System.Collections.Generic.Dictionary<int, UiCfgItem>();
			_dataList = new System.Collections.Generic.List<UiCfgItem>();
			
			for(int n = _buf.ReadSize() ; n > 0 ; --n)
			{
				UiCfgItem _v;
				_v = UiCfgItem.DeserializeUiCfgItem(_buf);
				_dataList.Add(_v);
				_dataMap.Add(_v.Id, _v);
			}
		}

		public System.Collections.Generic.Dictionary<int, UiCfgItem> DataMap => _dataMap;
		public System.Collections.Generic.List<UiCfgItem> DataList => _dataList;

		public UiCfgItem GetOrDefault(int key) => _dataMap.TryGetValue(key, out var v) ? v : null;
		public UiCfgItem Get(int key) => _dataMap[key];
		public UiCfgItem this[int key] => _dataMap[key];

		public void ResolveRef(GameConfigs tables)
		{
			foreach(var _v in _dataList)
			{
				_v.ResolveRef(tables);
			}
		}

	}

}
